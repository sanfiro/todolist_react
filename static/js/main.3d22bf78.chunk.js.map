{"version":3,"sources":["Pages/TodoListPage/TodoListPage.module.css","Pages/TodoListPage/components/TodoForm/TodoForm.module.css","Services/todoServices.js","Pages/TodoListPage/components/TodoForm/TodoForm.js","Pages/TodoListPage/components/Todo/Todo.js","Pages/TodoListPage/TodoListPage.js","App.js","serviceWorker.js","index.js","Pages/TodoListPage/components/Todo/Todo.module.css"],"names":["module","exports","BASE_URL","todoServices","getTodos","addTodo","removeTodo","updateTodo","completeTodo","a","axios","get","todo","post","todoId","delete","newTodo","put","TodoForm","edit","onSubmit","useState","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","id","Math","floor","random","text","className","styles","title","form","type","placeholder","onChange","name","todo_input","ref","onClick","btn","Todo","index","setEdit","isComplete","todo_complete","style","backgroundColor","str","s","l","hash","i","length","charCodeAt","stringToHslColor","key","iconContainer","icon","faEdit","faTrashAlt","TodoListPage","todos","setTodos","response","data","console","log","process","REACT_APP_SERVER","getTodosServer","updateTodoServer","newValue","test","addTodoServer","removeTodoServer","completeTodoServer","removedArr","filter","updatedTodos","map","prev","item","container","newTodos","el","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3d22bf78.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"TodoListPage_container__2CnHF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"TodoForm_title__ZsAQK\",\"form\":\"TodoForm_form__SZ7i3\",\"todo_input\":\"TodoForm_todo_input__25aom\",\"btn\":\"TodoForm_btn__19fyb\"};","import axios from 'axios'\r\n\r\nconst BASE_URL=\"http://localhost:9999\"\r\nexport const todoServices = {\r\n    getTodos,\r\n    addTodo,\r\n    removeTodo,\r\n    updateTodo,\r\n    completeTodo\r\n};\r\n\r\nasync function getTodos() {\r\n     return await axios.get(`${BASE_URL}/todos`);   \r\n  }\r\n\r\n  async function addTodo(todo) {\r\n    return await axios.post(`${BASE_URL}/todos`,todo);   \r\n }\r\n\r\n async function removeTodo(todoId) {\r\n    return await axios.delete(`${BASE_URL}/todos/${todoId}`);   \r\n }\r\n\r\n async function updateTodo(todoId,newTodo) {\r\n    return await axios.put(`${BASE_URL}/todos/${todoId}`,newTodo);   \r\n }\r\n\r\n async function completeTodo(todoId) {\r\n    return await axios.get(`${BASE_URL}/todos/complete/${todoId}`);   \r\n }\r\n \r\n   \r\n\r\n\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport styles from \"./TodoForm.module.css\";\r\nexport const TodoForm = ({ edit, onSubmit }) => {\r\n  const [input, setInput] = useState(edit?edit.value:\"\");\r\n\r\n  const inputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    inputRef.current.focus();\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    const { value } = e.target;\r\n    setInput(value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    // The preventDefault () method cancels the event\r\n    // if it is cancelable, meaning that the default action that\r\n    // belongs to the event will not occur.\r\n    //     Clicking on a \"Submit\" button, prevent it from submitting a form\r\n    // Clicking on a link, prevent the link from following the URL\r\n    e.preventDefault();\r\n\r\n    onSubmit({\r\n      // The floor() method rounds a number DOWNWARDS to the\r\n      // nearest integer, and returns the result.\r\n      id: Math.floor(Math.random() * 10000),\r\n      text: input,\r\n    });\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {!edit && <h1 className={styles.title}>What's the plan for today?</h1>}\r\n      <form onSubmit={() => null} className={styles.form}>\r\n        {edit ? (\r\n          <>\r\n          <input\r\n          type=\"text\"\r\n          placeholder=\"Update todo\"\r\n          value={input}\r\n          onChange={handleChange}\r\n          name=\"text\"\r\n          className={styles.todo_input}\r\n          ref={inputRef}\r\n          \r\n          />\r\n          <button onClick={handleSubmit} className={styles.btn}>\r\n          Update\r\n        </button>\r\n        </>\r\n        ) : (\r\n          <>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Add a todo\"\r\n              value={input}\r\n              onChange={handleChange}\r\n              name=\"text\"\r\n              className={styles.todo_input}\r\n              ref={inputRef}\r\n            />\r\n            <button onClick={handleSubmit} className={styles.btn}>\r\n              Add todo\r\n            </button>\r\n          </>\r\n        )}\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n","import { faEdit, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useState } from \"react\";\r\nimport { TodoForm } from \"../TodoForm/TodoForm\";\r\nimport styles from './Todo.module.css'\r\nexport const Todo = ({todo,index,completeTodo,removeTodo,updateTodo}) => {\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: ''\r\n  });\r\n  function stringToHslColor(str, s, l) {\r\n    var hash = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n      hash = str.charCodeAt(i) + ((hash << 5) - hash);\r\n    }\r\n    \r\n    var h = hash % 360;\r\n    return 'hsl('+h+', '+s+'%, '+l+'%)';\r\n  }\r\n\r\n  const submitUpdate = value => {\r\n    updateTodo(edit.id, value);\r\n    setEdit({\r\n      id: null,\r\n      value: ''\r\n    });\r\n  };\r\n\r\n  if (edit.id) {\r\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n  }\r\n  return (\r\n    <div\r\n      className={todo.isComplete ? styles.todo_complete : styles.todo}\r\n      style={{backgroundColor: stringToHslColor(todo.text, 50, 50)}}\r\n      key={index}\r\n    >\r\n      <div key={todo.id} onClick={() => completeTodo(todo.id)}\r\n      className={styles.text}>\r\n        {todo.text}\r\n      </div>\r\n      <div className={styles.iconContainer}>\r\n      <FontAwesomeIcon icon={faEdit}\r\n          onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n          className={styles.icon}\r\n        />\r\n        <FontAwesomeIcon icon={faTrashAlt}\r\n          onClick={() => removeTodo(todo.id)}\r\n          className={styles.icon}\r\n        />\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { todoServices } from \"../../Services/todoServices\";\r\nimport { Todo } from \"./components/Todo/Todo\";\r\nimport { TodoForm } from \"./components/TodoForm/TodoForm\";\r\nimport styles from \"./TodoListPage.module.css\";\r\nexport const TodoListPage = () => {\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (process.env.REACT_APP_SERVER) getTodosServer();\r\n  }, []);\r\n\r\n  // FUNCTIONS IF YOU USE THE SERVER\r\n  // -----------------------------------------------------------------------------------------\r\n  async function getTodosServer() {\r\n    try {\r\n      const response = await todoServices.getTodos();\r\n      setTodos(response.data);\r\n    } catch (error) {\r\n      console.log(\"error\", error);\r\n    }\r\n  }\r\n\r\n  const updateTodoServer = async (todoId, newValue) => {\r\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n      return;\r\n    }\r\n    try {\r\n      const response = await todoServices.updateTodo(todoId, newValue);\r\n      setTodos(response.data);\r\n    } catch (error) {\r\n      console.log(\"error\", error);\r\n    }\r\n  };\r\n\r\n  const addTodoServer = async (todo) => {\r\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n      return;\r\n    }\r\n    try {\r\n      const response = await todoServices.addTodo(todo);\r\n      setTodos(response.data);\r\n    } catch (error) {\r\n      console.log(\"error\", error);\r\n    }\r\n  };\r\n\r\n  const removeTodoServer = async (id) => {\r\n    try {\r\n      const response = await todoServices.removeTodo(id);\r\n      setTodos(response.data);\r\n    } catch (error) {\r\n      console.log(\"error\", error);\r\n    }\r\n  };\r\n\r\n  const completeTodoServer = async (id) => {\r\n    try {\r\n      const response = await todoServices.completeTodo(id);\r\n      setTodos(response.data);\r\n    } catch (error) {\r\n      console.log(\"error\", error);\r\n    }\r\n  };\r\n  // -----------------------------------------------------------------------------------------\r\n\r\n  // FUNCTIONS IF USING THE REACT STATE\r\n  // -----------------------------------------------------------------------------------------\r\n  const addTodo = (todo) => {\r\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n      return;\r\n    }\r\n    const newTodos = [todo, ...todos];\r\n\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  const removeTodo = (id) => {\r\n    const removedArr = [...todos].filter((todo) => todo.id !== id);\r\n\r\n    setTodos(removedArr);\r\n  };\r\n\r\n  const completeTodo = (id) => {\r\n    let updatedTodos = todos.map((todo) => {\r\n      if (todo.id === id) {\r\n        todo.isComplete = !todo.isComplete;\r\n      }\r\n      return todo;\r\n    });\r\n    setTodos(updatedTodos);\r\n  };\r\n\r\n  const updateTodo = (todoId, newValue) => {\r\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n      return;\r\n    }\r\n\r\n    setTodos((prev) =>\r\n      prev.map((item) => (item.id === todoId ? newValue : item))\r\n    );\r\n  };\r\n  // -----------------------------------------------------------------------------------------\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <TodoForm\r\n        onSubmit={process.env.REACT_APP_SERVER ? addTodoServer : addTodo}\r\n      />\r\n      {todos?.map((el, i) => (\r\n        <Todo\r\n          todo={el}\r\n          removeTodo={\r\n            process.env.REACT_APP_SERVER ? removeTodoServer : removeTodo\r\n          }\r\n          completeTodo={\r\n            process.env.REACT_APP_SERVER ? completeTodoServer : completeTodo\r\n          }\r\n          updateTodo={\r\n            process.env.REACT_APP_SERVER ? updateTodoServer : updateTodo\r\n          }\r\n          index={i}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport { TodoListPage } from './Pages/TodoListPage/TodoListPage';\n\nfunction App() {\n  return (\n   <TodoListPage/>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todo\":\"Todo_todo__rAGDf\",\"todo_complete\":\"Todo_todo_complete__294do\",\"icon\":\"Todo_icon__2_lKK\",\"text\":\"Todo_text__1Qnex\"};"],"sourceRoot":""}